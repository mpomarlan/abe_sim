# An object absorbs some number of particles it comes in contact with and as a result
# changes into something else.
# Note: the thing it changes into should also have the canAbsorb disposition or else
# the absorbed particle might not disappear.
absorbing:
  disposition: [self, fn, canAbsorb]
  progress:
    source: 
      mode: contact
    trajector:
      disposition: [trajector, fn, absorbable]
  resource: [self, customStateVariables, absorbing, [trajector, type], hp]
  accumulators:
    - variable: [self, customStateVariables, consuming, accumulator]
      value: $trajector
  completion:
    process: absorbing
    absorbed: [trajector, type]
# Something bakes if left for long enough in a container that can bake.
baking:
  disposition: [self, fn, bakeable]
  progress:
    trajector:
      disposition: [trajector, fn, canBake]
    source:
      mode: transitive-at
  resource: [self, customStateVariables, baking, hp]
  completion:
    process: baking
    instrument: [trajector, type]
# Something gets replaced by parts if something that can cut hits it
# with sufficient force and blade first.
chopping:
  disposition: [self, fn, choppable]
  progress:
    trajector:
      disposition: [trajector, fn, canCut]
      part: [trajector, fn, cutting, links]
    source:
      mode: contact
      constraints:
        - mode: alignment
          axis: [world, contact-normal]
          reference: [trajector, fn, cutting, axis, $trajector-part]
          threshold: 0.8
      minforce: [self, fn, cutting, force]
  completion:
    process: chopping
    instrument: [trajector, type]
# A particle disappears when near something that consumed it.
consuming:
  disposition: [self, fn, consumable]
  progress:
    trajector:
      resources:
        - resource:
          variable: [trajector, customStateVariables, consuming, accumulator]
          reference: [self, name]
          mode: includes
    source:
      mode: contact
  completion:
    process: consuming
# Something cracks -- is replaced by shards -- if it hits anything with sufficient force.
cracking:
  disposition: [self, fn, crackable]
  progress:
    source: 
      mode: contact
      minforce: [self, fn, cracking, force]
  completion:
    process: cracking
# Something gets replaced by parts if something that can cut descends upon it
cutting:
  disposition: [self, fn, cuttable]
  progress:
    trajector:
      disposition: [trajector, fn, canCut]
      part: [trajector, fn, cutting, links]
    source:
      mode: close
      radius: [self, fn, cutting, radius]
    path:
      mode: alignment
      reference: [trajector, fn, cutting, axis, $trajector-part]
      threshold: 0.7
    goal: 
      direction: towards
      threshold: 0.7
  resource: [self, customStateVariables, cutting, hp]
  completion:
    process: cutting
    instrument: [trajector, type]
# Something fries if left for long enough in a container that can fry.
flattening:
  disposition: [self, fn, flattenable]
  progress:
    trajector:
      disposition: [trajector, fn, canFlatten]
      part: [trajector, fn, flattening, links]
    source:
      mode: close
      radius: [self, fn, flattening, radius]
    path:
      mode: alignment
      reference: [trajector, fn, flattening, axis, $trajector-part]
      threshold: 0.7
    goal: 
      direction: towards
      threshold: 0.7
  resource: [self, customStateVariables, flattening, hp]
  completion:
      process: flattening
      instrument: [trajector, type]
frying:
  disposition: [self, fn, fryable]
  progress:
    trajector:
      disposition: [trajector, fn, canFry]
    source:
      mode: transitive-at
  resource: [self, customStateVariables, frying, hp]
  completion:
    process: frying
    instrument: [trajector, type]
# Something gets mashed -- replaced with shards -- if a masher moves in an appropriate way long enough.
mashing:
  disposition: [self, fn, mashable]
  progress:
    trajector:
      disposition: [trajector, fn, canMash]
      part: [trajector, fn, mashing, links]
    source:
      mode: close
      radius: [self, fn, mashing, radius]
    path:
      mode: alignment
      reference: [trajector, fn, mashing, axis, $trajector-part]
      threshold: 0.7
    goal: 
      direction: towards
      threshold: 0.7
  resource: [self, customStateVariables, mashing, hp]
  completion:
      process: mashing
      instrument: [trajector, type]
# Something gets peeled -- replaced by a core and peels -- when a peeling instrument passes by, with its 
# velocity aligned to its peeling axis
peeling:
  disposition: [self, fn, peelable]
  progress:
    trajector:
      disposition: [trajector, fn, canPeel]
      part: [trajector, fn, peeling, links]
    source:
      mode: close
      radius: [self, fn, peeling, radius]
    path:
      mode: alignment
      reference: [trajector, fn, peeling, axis, $trajector-part]
      threshold: 0.8
    goal:
      direction: around
      threshold: 0.2
  resource: [self, customStateVariables, peeling, hp]
  completion:
    process: peeling
    instrument: [trajector, type]
# When tipped over, an object produces other particles
pouring:
  disposition: [self, fn, pourable]
  progress:
    relatum:
      part: [self, fn, pouring, links]
    source:
      mode: pose
      constraints:
        - mode: counter-alignment
          axis: [self, fn, pouring, axis, $relatum-part]
          reference: [world, upAxis]
          threshold: 0.8
  resource: [self, customStateVariables, pouring, hp, $relatum-part]
  reset: 
    value: [self, fn, pouring, hp, $relatum-part]
    lives: [self, customStateVariables, pouring, capacity]
  completion:
    process: pouring
    part: $relatum-part
# Something gets seeded -- replaced by core and seeds -- when a cutting instrument moves away, while
# keeping the cutting axis orthogonal to the velocity
seeding:
  disposition: [self, fn, seedable]
  progress:
    trajector:
      disposition: [trajector, fn, canSeed]
      part: [trajector, fn, seeding, links]
    source:
      mode: close
      radius: [self, fn, seeding, radius]
    path:
      mode: alignment
      reference: [trajector, fn, seeding, axis, $trajector-part]
      threshold: 0.8
    goal:
      direction: around
      threshold: 0.2
  resource: [self, customStateVariables, seeding, hp]
  completion:
    process: seeding
    instrument: [trajector, type]
#seeding:
#  disposition: [self, fn, seedable]
#  progress:
#    relatum:
#      part: [self, fn, seeding, links]
#    trajector:
#      disposition: [trajector, fn, canCut]
#      part: [trajector, fn, cutting, links]
#    source:
#      mode: close
#      radius: [self, fn, seeding, radius]
#    path:
#      mode: orthogonal
#      reference: [trajector, fn, cutting, axis, $trajector-part]
#      threshold: 0.8
#    goal:
#      direction: away
#      threshold: 0.6
#  resource: [self, customStateVariables, seeding, hp]
#  completion:
#    process: seeding
#    instrument: [trajector, type]
# An item skims a little from some substance and then carries it
skimming:
  disposition: [self, fn, canSkim]
  progress:
    relatum:
      part: [self, fn, skimming, links]
    trajector:
      disposition: [trajector, fn, skimmable]
    source:
      mode: close
      radius: [self, fn, skimming, radius]
  accumulators:
    - variable: [self, customStateVariables, wiping, carrying, hp, $relatum-part]
      value: 20
    - variable: [self, customStateVariables, wiping, carrying, substances, $relatum-part]
      value: [trajector, type]
  # An item accumulates a substance stored by another item that moves around in close proximity
# Something gets sliced -- a slice is added and optionally the item is replaced with a diminished version when a cutting tool moves nearby
slicing:
  disposition: [self, fn, sliceable]
  progress:
    trajector:
      disposition: [trajector, fn, canCut]
      part: [trajector, fn, cutting, links]
    source:
      mode: close
      radius: [self, fn, cutting, radius]
    path:
      mode: alignment
      reference: [trajector, fn, cutting, length, $trajector-part]
      threshold: 0.8
    goal:
      direction: around
      threshold: 0.2
  resource: [self, customStateVariables, slicing, hp]
  reset: 
    value: [self, fn, slicing, hp]
  completion:
    process: slicing
    instrument: [trajector, type]
spreading:
  disposition: [self, fn, canSpread]
  progress:
    relatum:
      part: [self, fn, wiping, links]
      substance: [self, customStateVariables, wiping, carrying, substances, $relatum-part]
    trajector:
      disposition: [trajector, fn, canBeSpreadUpon]
    source:
      mode: close
      radius: [self, fn, spreading, radius]
    path:
      mode: orthogonal
      reference: [self, fn, spreading, axis, $relatum-part]
      threshold: 0.2
    goal:
      direction: around
      threshold: 0.2
  resource: [self, customStateVariables, wiping, carrying, hp, $relatum-part]
  clear:
    - [self, customStateVariables, wiping, carrying, substances, $relatum-part, $relatum-substance]
gettingSpreadUpon:
  disposition: [self, fn, canBeSpreadUpon]
  progress:
    trajector:
      disposition: [trajector, fn, canSpread]
      part: [trajector, fn, spreading, links]
      substance: [trajector, customStateVariables, wiping, carrying, substances, $trajector-part]
    source:
      mode: close
      radius: [self, fn, spreading, radius]
    path:
      mode: orthogonal
      reference: [trajector, fn, spreading, axis, $trajector-part]
      threshold: 0.2
    goal:
      direction: around
      threshold: 0.2
  resource: [self, customStateVariables, spreading, $trajector-substance, hp]
  completion:
    process: gettingSpreadUpon
    instrument: [trajector, type]
    substance: $trajector-substance
# Something is washed if left for long enough in a container that can wash.
washing:
  disposition: [self, fn, washable]
  progress:
    trajector:
      disposition: [trajector, fn, canWash]
    source:
      mode: transitive-at
  resource: [self, customStateVariables, washing, hp]
  completion:
    process: washing
    instrument: [trajector, type]
# An item absorbs then carries a substance it contacts
wiping:
  disposition: [self, fn, canWipe]
  progress:
    relatum:
      part: [self, fn, wiping, links]
    trajector:
      disposition: [trajector, fn, wipable]
    source:
      mode: contact
  accumulators:
    - variable: [self, customStateVariables, consuming, accumulator]
      value: $trajector
    - variable: [self, customStateVariables, wiping, carrying, hp, $relatum-part]
      value: 20
    - variable: [self, customStateVariables, wiping, carrying, substances, $relatum-part]
      value: [trajector, type]
  
